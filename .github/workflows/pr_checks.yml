name: integration_test

on:
  pull_request:
    branches: [ master, version2 ]

jobs:
  publish:
    name: Build, Publish and Deploy on Test ENV
    runs-on: ubuntu-latest

    env:
      EKS_CLUSTER_NAME: colearn-v3
      AWS_REGION: us-west-2
      NAMESPACE: pre-test

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY_IMG }}
          export_default_credentials: true

      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Configuring Docker to use gcloud Auth
        run: |
          gcloud auth configure-docker -q
      # Push image to Google Container Registry
      - name: Build and Push Images
        run: |
          ./img-push.sh
        working-directory: ./k8s

      # Install helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      # Turnstyle avoids concurrent github actions trying to deploy at once
      - name: Turnstyle
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Start Deployment
        uses: bobheadxi/deployments@v0.4.3
        id: deployment_sandbox
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: sandbox

      # Setup AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Setup Kubeconfig
      - name: Setup kubeconfig
        id: setup-kubeconfig
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      # Setting Short-Sha
      - name: get shortsha
        id: vars
        run: |
         echo ::set-output name=sha_short::$(git log -1 --format=%h)
      - name: use env
        run: |
          echo $SHORTSHA
        env:
          SHORTSHA: ${{ steps.vars.outputs.sha_short }}

      # Deploy the Docker image to the GKE cluster

      - name: Deploy Admin to Sandbox
        run: |
          helm upgrade --install --wait --timeout 120s sandbox-admin-${{ env.SHORTSHA }} ./k8s/pre-relayer-test/ \
            --set admin.name=admin-${{ env.SHORTSHA }} \
            --set admin.tag=${{ env.SHORTSHA }}  \
            --set proxy.enabled=false \
            -n ${{ env.NAMESPACE }}
        env:
          SHORTSHA: ${{ steps.vars.outputs.sha_short }}

      - name: Sleep for 60s seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '60s'

      - name: Deploy Proxy to Sandbox
        run: |
          helm upgrade --install --wait --timeout 120s sandbox-proxy-${{ env.SHORTSHA }} ./k8s/pre-relayer-test/ \
            --set admin.enabled=false \
            --set proxy.tag=${{ env.SHORTSHA }}  \
            -n ${{ env.NAMESPACE }}
        env:
          SHORTSHA: ${{ steps.vars.outputs.sha_short }}

      - name: Sleep for 60s seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '60s'

     # Improvement : Check for No of proxies running 
      # matches no of proxies stated in values


      # Building Images for Docker
      
      - name: Build images
        run: docker-compose -f "docker/docker-compose.yml" build owner reader
      
      # Reteriving the pushed contract
      - name: Get Staging Contract
        run: >
          export CONT_ADDR=$( curl https://pre-relayer.s3.us-west-2.amazonaws.com/contract/contract-test-${{ env.SHORTSHA }}.json | jq -r .contract_address) && 
          echo "CONT_ADDR=${CONT_ADDR}" >> $GITHUB_ENV
        env:
          SHORTSHA: ${{ steps.vars.outputs.sha_short }}

     # Adding Random Data 
      - name: Add data element
        run: > 
          echo $RANDOM | md5sum | head -c 20 > original_data.txt;
          echo "[OK] Generated file: $(cat original_data.txt)";
          docker-compose -f "docker/docker-compose.yml" run owner --contract-address $CONT_ADDR add-data /data/original_data.txt > logs;
          cat logs;
          export DATA_ID=$(
            cat logs |
            grep 'hash_id is ' |
            awk -F'hash_id is ' '{ print $2 }'
          );
          echo "[OK] Data id [${DATA_ID}]";
          echo "DATA_ID=${DATA_ID}" >>  $GITHUB_ENV
          
      # Getting Reader Public Key  
      - name: Get reader public key
        run: >
          docker-compose -f "docker/docker-compose.yml" run reader --contract-address $CONT_ADDR get-data-status $DATA_ID > logs;
          cat logs;
          export READER_PUBKEY=$(
            cat logs |
            grep 'reader public key: ' |
            awk -F'reader public key: ' '{ print $2 }'
          );
          echo "[OK] Reader Public key [${READER_PUBKEY}]";
          echo "READER_PUBKEY=${READER_PUBKEY}" >>  $GITHUB_ENV
      - name: Sleep for 30s seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '30s'

      # Granting Access to the Data
      - name: Grant access to data
        run: >
          docker-compose -f "docker/docker-compose.yml" run owner --contract-address $CONT_ADDR grant-access $DATA_ID $READER_PUBKEY 
      - name: Sleep for 30s seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '30s'
      
      # Reading the data
      - name: Read data
        run: |
          docker-compose -f "docker/docker-compose.yml" run reader --contract-address $CONT_ADDR get-data-status $DATA_ID;
          docker-compose -f "docker/docker-compose.yml" run reader --contract-address $CONT_ADDR get-data $DATA_ID /data/decrypted_data.txt;
          echo "[OK] Decrypted file: $(cat decrypted_data.txt)";
          diff original_data.txt decrypted_data.txt
      
      # Get Logs for Admin and Proxy K8s Deployment
      - name: Get Admin and Proxy Logs
        if: always()
        run: |
          echo "Looking for ${{ env.SHORTSHA }} deployments in namespace ${{ env.NAMESPACE }}:"
          kubectl get pods -n ${{ env.NAMESPACE }}
          kubectl logs  $(kubectl get pods -n ${{ env.NAMESPACE }} | grep admin-${{ env.SHORTSHA }} | awk '{ print $1 }') --timestamps -n ${{ env.NAMESPACE }}
          for POD in    $(kubectl get pods -n ${{ env.NAMESPACE }} | grep proxy-${{ env.SHORTSHA }} | awk '{ print $1 }'); do kubectl logs $POD --timestamps -n ${{ env.NAMESPACE }}; done
        env:
          SHORTSHA: ${{ steps.vars.outputs.sha_short }}
      
      # Removing Admin and Proxy K8s Deployment
      - name: Cleaning Up Admin and Proxy from Sandbox
        if: always()
        run: |
          helm uninstall sandbox-admin-${{ env.SHORTSHA }} -n ${{ env.NAMESPACE }}
          helm uninstall sandbox-proxy-${{ env.SHORTSHA }} -n ${{ env.NAMESPACE }}
        env:
          SHORTSHA: ${{ steps.vars.outputs.sha_short }}

      # Publish Helm output to the PR
      - name: Update Deployment Status
        uses: bobheadxi/deployments@v0.4.3
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment_sandbox.outputs.deployment_id }}