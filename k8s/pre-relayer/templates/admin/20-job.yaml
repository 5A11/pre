{{- if .Values.admin.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.admin.name }}
  labels:
    app: pre-relayer-admin
    {{- include "pre-relayer.labels" . | nindent 4 }}
  namespace: {{ .Values.namespace }}
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 604800
  template:
    metadata:
      labels:
        app: pre-relayer
    spec:
      containers:
        - name: admin
          image: {{ .Values.admin.image }}:{{ .Values.admin.tag }}
          resources:
            {{- toYaml .Values.admin.resources | nindent 12 }}
          ports:
            - containerPort: {{ .Values.admin.port  }}
          env:
            - name: LEDGER_CONFIG
              value: "/configs/ledger_config.yaml"
            - name: ADMIN_LEDGER
              value: "/keys/admin_ledger.key"
          volumeMounts:
          - name: config-volume
            mountPath: /configs/ledger_config.yaml
            subPath: ledger_config.yaml
          - name: admin-key-volume
            mountPath: /keys/admin_ledger.key
            subPath: admin_ledger.key
          - name: contract-address
            mountPath: /contract-address/
          command: ["/bin/sh"]
          args:
            - -c
            - >-
                python3 apps/admin.py --fund --ledger-config ${LEDGER_CONFIG} --ledger-private-key ${ADMIN_LEDGER} instantiate-contract --threshold 2 --output-file /contract-address/latest.json
        - name: contract
          image: {{ .Values.admin.contract }}
          resources:
            {{- toYaml .Values.admin.resources | nindent 12 }}
          ports:
            - containerPort: {{ .Values.admin.port  }}
          volumeMounts:
          - name: contract-address
            mountPath: /contract-address/
          - name: admin-key-volume
            mountPath: /keys/cred.rc
            subPath: cred.rc
          command: ["/bin/sh"]
          args:
            - -c
            - >-
                echo "waiting 30s" &&
                sleep 30s &&
                echo "copying contract" &&
                cp /contract-address/latest.json /contract-address/contract-{{ .Values.admin.tag }}.json &&
                source /keys/cred.rc && 
                echo "uploading contract" &&
                aws s3 cp /contract-address/latest.json s3://pre-relayer/contract/{{ .Values.env }}/ &&
                aws s3 cp /contract-address/contract-{{ .Values.admin.tag }}.json s3://pre-relayer/contract/{{ .Values.env }}/ &&
                echo "contract uploaded" &&
                exit 0
      volumes:
        - name: config-volume
          configMap:
            name: relayer-config
        - name: admin-key-volume
          secret:
            secretName: pre-admin
        - name: contract-address
          persistentVolumeClaim:
            claimName: pre-relayer
      restartPolicy: "Never"
{{ end }}