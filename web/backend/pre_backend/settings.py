"""
Django settings for pre_backend project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os

from pathlib import Path

# from pre.contract.cosmos_contracts import AdminContract
from pre.crypto.umbral_crypto import UmbralCrypto
from pre.ledger.cosmos.ledger import CosmosLedger, CosmosLedgerConfig
from pre.storage.ipfs_storage import IpfsStorage, IpfsStorageConfig


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-sz%x_x(0rd9sv+x2#rhv6oh)6_7z%=(5d16b+^eqyj2k(0le6b"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost"]


# Application definition

INSTALLED_APPS = [
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.facebook",
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django_cleanup.apps.CleanupConfig",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_auth",
    "rest_auth.registration",
    # Internal apps
    "pre_backend.apps.authorization",
    "pre_backend.apps.data_accesses",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "pre_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "pre_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB", "postgres"),
        "USER": os.environ.get("POSTGRES_USER", "postgres"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "pre_backend-passw00rd"),
        "HOST": os.environ.get("POSTGRES_HOST", "db"),
        "PORT": os.environ.get("POSTGRES_PORT", 5432),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# uploads folder settings
BASE_DIR = Path(os.path.dirname(os.path.dirname(__file__)))
REPOSITORY_ROOT = BASE_DIR

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(REPOSITORY_ROOT, "static/")

MEDIA_URL = "/uploads/"
MEDIA_ROOT = os.path.join(REPOSITORY_ROOT, "uploads/")

SITE_ID = 1


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ],
}

# Add next if custom authentication is needed (i.e. via email)
# AUTHENTICATION_BACKENDS = ["pre_backend.apps.authorization.backends.EmailBackend"]
REST_AUTH_REGISTER_SERIALIZERS = {
    "REGISTER_SERIALIZER": "pre_backend.apps.authorization.serializers.RegisterSerializer"
}

# email verification settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
ACCOUNT_EMAIL_VERIFICATION = "optional"  # Change to "mandatory" if necessary
ACCOUNT_EMAIL_REQUIRED = True
EMAIL_USE_TLS = True
EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", 587))
EMAIL_HOST_USER = DEFAULT_FROM_EMAIL = SERVER_EMAIL = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")


FRONT_URL = os.environ.get("FRONT_URL", "http://localhost:3000")

CORS_ORIGIN_WHITELIST = [FRONT_URL]

FILE_UPLOAD_MAX_MEMORY_SIZE = 6 * 1024 * 1024
DATA_UPLOAD_MAX_MEMORY_SIZE = 6 * 1024 * 1024

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# PRE SDK related config

UMBRAL_CRYPTO = UmbralCrypto()

LEDGER_CONFIG = os.environ.get("LEDGER_CONFIG", CosmosLedgerConfig.make_default())
LEDGER = CosmosLedger(**LEDGER_CONFIG)

STORAGE_CONFIG = os.environ.get("STORAGE_CONFIG", IpfsStorageConfig.make_default())
IPFS_HOST = os.environ.get("IPFS_HOST", "ipfs")
STORAGE_CONFIG["addr"] = IPFS_HOST
IPFS_STORAGE = IpfsStorage(**STORAGE_CONFIG)

STAKE_DENOM = os.environ.get("STAKE_DENOM", "atestfet")
N_MAX_PROXIES = os.environ.get("N_MAX_PROXIES", 10)

THRESHOLD = 1


def _get_contract_address():
    # FUNDED_FETCHAI_PRIVATE_KEY_1 = (
    #     "bbaef7511f275dc15f47436d14d6d3c92d4d01befea073d23d0c2750a46f6cb3"
    # )
    # admin_ledger_crypto = LEDGER.load_crypto_from_str(FUNDED_FETCHAI_PRIVATE_KEY_1)
    # return AdminContract.instantiate_contract(
    #             ledger=LEDGER,
    #             admin_private_key=admin_ledger_crypto,
    #             admin_addr=admin_ledger_crypto.get_address(),
    #             stake_denom=STAKE_DENOM,
    #             threshold=THRESHOLD,
    #             n_max_proxies=N_MAX_PROXIES,
    # )
    return "contract-address"


CONTRACT_ADDRESS = os.environ.get(
    "CONTRACT_ADDRESS", _get_contract_address()
)  # TODO: replace with a real address that can be used for local usage.
